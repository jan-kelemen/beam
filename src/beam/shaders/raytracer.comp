#version 460

uint uintMax = ~0;

float posInf = 1.0 / 0.0;
float negInf = -1.0 / 0.0;

layout (local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform PushConsts {
    vec3 cameraPosition;
    uint worldCount;
    vec3 cameraFront;
    uint materialCount;
    vec3 cameraUp;
    uint samplesPerPixel;
    uint maxDepth;
    float defocusAngle;
    float focusDistance;
    float fovy;
} pc;

layout(rgba32f, set = 0, binding = 0) uniform image2D image;

struct Sphere
{
    vec3 center;
    float radius;
    uint material;
};

layout(std430, binding = 1) readonly buffer WorldBuffer {
    Sphere spheres[];
} world;

struct Material {
    vec3 color;
    float val;
    uint type;
};

layout(std430, binding = 2) readonly buffer MaterialBuffer {
    Material materials[];
} mat;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

vec3 rayAt(Ray r, float t) {
    return r.origin + t * r.direction;
}

struct HitRecord
{
    vec3 p;
    vec3 normal;
    float t;
    uint material;
    bool frontFace;
};

void faceNormal(Ray r, vec3 outwardNormal, out bool frontFace, out vec3 normal) {
    frontFace = dot(r.direction, outwardNormal) < 0;
    normal = frontFace ? outwardNormal : -outwardNormal;
}

struct Interval
{
    float min;
    float max;
};

Interval empty = Interval(posInf, negInf);
Interval universe = Interval(negInf, posInf);

bool surrounds(Interval i, float x) {
    return i.min < x && x < i.max;
}

bool contains(Interval i, float x) {
    return i.min <= x && x <= i.max;
}

bool hitSphere(Sphere s, Ray r, Interval inter, inout HitRecord rec) {
    vec3 oc = s.center - r.origin;

    float a = dot(r.direction, r.direction);
    float h = dot(r.direction, oc);
    float c = dot(oc, oc) - s.radius * s.radius;
    float discriminant = h*h - a*c;

    if (discriminant < 0) {
        return false;
    }
    
    float sqrtd = sqrt(discriminant);

    float root = (h - sqrtd) / a;

    if (!surrounds(inter, root)) {
        root = (h + sqrtd) / a;
        if (!surrounds(inter, root)) {
            return false;
        }
    }

    rec.t = root;
    rec.p = rayAt(r, rec.t);
    faceNormal(r, (rec.p - s.center) / s.radius, rec.frontFace, rec.normal);

    return true;
}

bool hitWorld(Ray r, Interval inter, inout HitRecord rec) {
    bool hitAnything = false;
    float closestSoFar = inter.max;

    HitRecord tempRec;
    for(uint i = 0; i != pc.worldCount; ++i) {
        if (hitSphere(world.spheres[i], r, Interval(inter.min, closestSoFar), tempRec)) {
            hitAnything = true;
            closestSoFar = tempRec.t;
            rec = tempRec;
            rec.material = world.spheres[i].material;
        }
    }

    return hitAnything;
}


// https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
uint rng_state;
uint randPCG()
{
    uint state = rng_state;
    rng_state = rng_state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float randomFloat() {
    return float(randPCG()) / uintMax;
}

float randomFloat(float min, float max) {
    return min + (max - min) * randomFloat();
}

vec3 randomVec3() {
    return vec3(randomFloat(), randomFloat(), randomFloat());
}

vec3 randomVec3(float min, float max) {
    return vec3(randomFloat(min, max), randomFloat(min, max), randomFloat(min, max));
}

vec3 randomInUnitSphere() {
    while (true) {
        vec3 p = randomVec3(-1.0, 1.0);
        if (dot(p, p) < 1)
            return p;
    }
}

vec3 randomNormVec3() {
    return normalize(randomInUnitSphere());
}

vec3 randomOnHemisphere(vec3 normal) {
    vec3 onUnitSphere = randomNormVec3();
    if (dot(onUnitSphere, normal) > 0.0) {
        return onUnitSphere;
    }
    return -onUnitSphere;
}

vec3 sampleSquare() {
    return vec3(float(randPCG()) / uintMax - 0.5, float(randPCG()) / uintMax - 0.5, 0);
}

vec3 defocusDiskSample(vec3 defocusDiskU, vec3 defocusDiskV) {
    vec3 p = randomInUnitSphere();
    return pc.cameraPosition + p.x * defocusDiskU + p.y * defocusDiskV;
}

Ray getRay(ivec2 texelCoord, vec3 center, vec3 pixel00, vec3 pixelDeltaU, vec3 pixelDeltaV, vec3 defocusDiskU, vec3 defocusDiskV) {
    vec3 offset = sampleSquare();
    vec3 texsample = pixel00
        + (texelCoord.x + offset.x) * pixelDeltaU
        + (texelCoord.y + offset.y) * pixelDeltaV;

    vec3 origin = (pc.defocusAngle <= 0) ? center : defocusDiskSample(defocusDiskU, defocusDiskV);
    vec3 direction = texsample - origin;

    return Ray(origin, direction);
}

bool nearZero(vec3 direction) {
    float eps = 1e-8;

    direction = abs(direction);

    return direction.x < eps && direction.y < eps && direction.z < eps;
}

float reflectance(float cosine, float refractionIndex) {
    float r0 = (1 - refractionIndex) / (1 + refractionIndex);
    r0 = r0 * r0;
    return r0 + (1 - r0) * pow((1 - cosine), 5);
}

bool scatter(Ray r, HitRecord rec, out vec3 attenuation, out Ray scattered) {
    if (rec.material >= pc.materialCount) {
        return false;
    }

    uint type = mat.materials[rec.material].type;

    if (type == 0) {
        vec3 scatterDirection = rec.normal + randomNormVec3();

        if (nearZero(scatterDirection)) {
            scatterDirection = rec.normal;
        }

        scattered = Ray(rec.p, scatterDirection);
        attenuation = mat.materials[rec.material].color;

        return true;
    }
    
    if (type == 1) {
        vec3 reflected = reflect(r.direction, rec.normal);
        reflected = normalize(reflected + (mat.materials[rec.material].val * randomNormVec3()));

        scattered = Ray(rec.p, reflected);
        attenuation = mat.materials[rec.material].color;

        return dot(scattered.direction, rec.normal) > 0;
    }

    if (type == 2) {            
        float ri = rec.frontFace ? ( 1.0 / mat.materials[rec.material].val) : mat.materials[rec.material.x].val;

        vec3 unitDirection = normalize(r.direction);
        float cosTheta = min(dot(-unitDirection, rec.normal), 1.0);
        float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

        bool cannotRefract = ri * sinTheta > 1.0;
        vec3 direction;

        if (cannotRefract || reflectance(cosTheta, ri) > randomFloat())
            direction = reflect(unitDirection, rec.normal);
        else
            direction = refract(unitDirection, rec.normal, ri);

        attenuation = vec3(1.0);
        scattered = Ray(rec.p, direction);

        return true;
    }

    return false;
}

vec4 rayColor(Ray r) {
    Interval inter = Interval(0.001, posInf);

    vec4 reflected = vec4(1);
    vec4 current = vec4(0);

    for (uint i = 0; i != pc.maxDepth; ++i) {
        HitRecord rec;
        if (!hitWorld(r, inter, rec)) {
            vec3 white = vec3(1);
            vec3 blue = vec3(0.5, 0.7, 1.0);

            float alpha = 0.5 * (normalize(r.direction).y + 1.0);
            current = vec4((1.0 - alpha) * white + alpha * blue, 1.0);

            break;
        }

        Ray scattered;
        vec3 attenuation;
        if (!scatter(r, rec, attenuation, scattered)) {
            current = vec4(0);
            break;
        }

        reflected *= vec4(attenuation, 1.0);
        r = scattered;
    }

    return reflected * current;
}



void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(image);

    rng_state = texelCoord.x + texelCoord.y * imageSize.y;

    float aspectRatio = float(imageSize.x) / imageSize.y;

    vec3 w = normalize(pc.cameraPosition - pc.cameraFront);
    vec3 u = normalize(cross(pc.cameraUp, w));
    vec3 v = cross(w, u);

    float theta = radians(pc.fovy);
    float h = tan(theta / 2);

    float viewportHeight = 2 * h * pc.focusDistance;
    float viewportWidth = viewportHeight * aspectRatio;

    vec3 viewportU = viewportWidth * u;
    vec3 viewportV = viewportHeight * -v;

    vec3 pixelDeltaU = viewportU / imageSize.x;
    vec3 pixelDeltaV = viewportV / imageSize.y;

    vec3 viewportUpperLeft = pc.cameraPosition
                             - pc.focusDistance * w - viewportU / 2 - viewportV / 2;

    vec3 pixel00 = viewportUpperLeft + 0.5 * (pixelDeltaU + pixelDeltaV);

    float defocusRadius = pc.focusDistance * tan(radians(pc.defocusAngle / 2));
    vec3 defocusDiskU = u * defocusRadius;
    vec3 defocusDiskV = v * defocusRadius;

    if(texelCoord.x < imageSize.x && texelCoord.y < imageSize.y)
    {
        vec4 color = vec4(0);
        for (uint i = 0; i != pc.samplesPerPixel; ++i) {
            Ray r = getRay(texelCoord, pc.cameraPosition, pixel00, pixelDeltaU, pixelDeltaV, defocusDiskU, defocusDiskV);
            color += rayColor(r);
        }
        color /= pc.samplesPerPixel;
    
        imageStore(image, texelCoord, color);
    }
}
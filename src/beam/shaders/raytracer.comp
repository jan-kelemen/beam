#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform PushConsts {
    vec3 cameraPosition;
} pc;

layout(rgba32f, set = 0, binding = 0) uniform image2D image;

struct ray
{
    vec3 origin;
    vec3 direction;
};

vec3 rayAt(ray r, float t) {
    return r.origin + t * r.direction;
}

float hitSphere(vec3 center, float radius, ray r) {
    vec3 oc = center - r.origin;

    float a = dot(r.direction, r.direction);
    float h = dot(r.direction, oc);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = h*h - a*c;

    if (discriminant < 0) {
        return -1.0;
    } 

    return (h - sqrt(discriminant)) / a;
}

vec4 rayColor(ray r) {
    float t = hitSphere(vec3(0, 0, -1), 0.5, r);

    if (t > 0.0) {
        vec3 N = normalize(rayAt(r, t) - vec3(0,0,-1));
        vec4 color = vec4(N + vec3(1), 1.0);

        return 0.5 * color;
    }

    vec3 normDirection = normalize(r.direction);
    float alpha = 0.5 * (normDirection.y + 1.0);
    return (1.0 - alpha) * vec4(1) + alpha * vec4(0.5, 0.7, 1.0, 1.0);
}

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(image);
    float aspectRatio = float(imageSize.x) / imageSize.y;

    float focalLength = 1.0;
    float viewportHeight = 2.0;
    float viewportWidth = viewportHeight * aspectRatio;

    vec3 viewportU = vec3(viewportWidth, 0, 0);
    vec3 viewportV = vec3(0, -viewportHeight, 0);

    vec3 pixelDeltaU = viewportU / imageSize.x;
    vec3 pixelDeltaV = viewportV / imageSize.y;

    vec3 viewportUpperLeft = pc.cameraPosition
                             - vec3(0, 0, focalLength) - viewportU / 2 - viewportV /2;

    vec3 pixel00 = viewportUpperLeft + 0.5 * (pixelDeltaU + pixelDeltaV);


    if(texelCoord.x < imageSize.x && texelCoord.y < imageSize.y)
    {
        vec3 pixelCenter = pixel00 + (texelCoord.x * pixelDeltaU) + (texelCoord.y * pixelDeltaV);

        vec3 rayDirection = pixelCenter - pc.cameraPosition;
        ray r = ray(pc.cameraPosition, rayDirection);
    
        imageStore(image, texelCoord, rayColor(r));
    }
}